plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'org.hankki'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {

	// Spring Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'org.postgresql:postgresql'

	// Health Check
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Feign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.2'

	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// AWS
	implementation("software.amazon.awssdk:s3:2.21.0")
	implementation("software.amazon.awssdk:bom:2.21.0")

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Discord Webhook
	implementation 'com.github.napstr:logback-discord-appender:1.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

def generated = 'src/main/generated'
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

clean {
	delete file(generated)
}

tasks.register('copyYml', Copy) {
	copy {
		from './server-yml'
		include "*.yml"
		into 'src/main/resources'
	}
}